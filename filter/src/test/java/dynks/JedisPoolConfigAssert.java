package dynks;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;
import redis.clients.jedis.JedisPoolConfig;

/**
 * {@link redis.clients.jedis.JedisPoolConfig} specific assertions - Generated by CustomAssertionGenerator.
 */
public class JedisPoolConfigAssert extends AbstractAssert<JedisPoolConfigAssert, JedisPoolConfig> {

  /**
   * Creates a new <code>{@link JedisPoolConfigAssert}</code> to make assertions on actual JedisPoolConfig.
   * @param actual the JedisPoolConfig we want to make assertions on.
   */
  public JedisPoolConfigAssert(JedisPoolConfig actual) {
    super(actual, JedisPoolConfigAssert.class);
  }

  /**
   * An entry point for JedisPoolConfigAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myJedisPoolConfig)</code> and get specific assertion with code completion.
   * @param actual the JedisPoolConfig we want to make assertions on.
   * @return a new <code>{@link JedisPoolConfigAssert}</code>
   */
  public static JedisPoolConfigAssert assertThat(JedisPoolConfig actual) {
    return new JedisPoolConfigAssert(actual);
  }

  /**
   * Verifies that the actual JedisPoolConfig is blockWhenExhausted.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is not blockWhenExhausted.
   */
  public JedisPoolConfigAssert isBlockWhenExhausted() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getBlockWhenExhausted()) {
      failWithMessage("\nExpected actual JedisPoolConfig to be blockWhenExhausted but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is not blockWhenExhausted.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is blockWhenExhausted.
   */
  public JedisPoolConfigAssert isNotBlockWhenExhausted() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getBlockWhenExhausted()) {
      failWithMessage("\nExpected actual JedisPoolConfig not to be blockWhenExhausted but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's evictionPolicyClassName is equal to the given one.
   * @param evictionPolicyClassName the given evictionPolicyClassName to compare the actual JedisPoolConfig's evictionPolicyClassName to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's evictionPolicyClassName is not equal to the given one.
   */
  public JedisPoolConfigAssert hasEvictionPolicyClassName(String evictionPolicyClassName) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected evictionPolicyClassName of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualEvictionPolicyClassName = actual.getEvictionPolicyClassName();
    if (!Objects.areEqual(actualEvictionPolicyClassName, evictionPolicyClassName)) {
      failWithMessage(assertjErrorMessage, actual, evictionPolicyClassName, actualEvictionPolicyClassName);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is jmxEnabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is not jmxEnabled.
   */
  public JedisPoolConfigAssert isJmxEnabled() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getJmxEnabled()) {
      failWithMessage("\nExpected actual JedisPoolConfig to be jmxEnabled but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is not jmxEnabled.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is jmxEnabled.
   */
  public JedisPoolConfigAssert isNotJmxEnabled() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getJmxEnabled()) {
      failWithMessage("\nExpected actual JedisPoolConfig not to be jmxEnabled but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's jmxNamePrefix is equal to the given one.
   * @param jmxNamePrefix the given jmxNamePrefix to compare the actual JedisPoolConfig's jmxNamePrefix to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's jmxNamePrefix is not equal to the given one.
   */
  public JedisPoolConfigAssert hasJmxNamePrefix(String jmxNamePrefix) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected jmxNamePrefix of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualJmxNamePrefix = actual.getJmxNamePrefix();
    if (!Objects.areEqual(actualJmxNamePrefix, jmxNamePrefix)) {
      failWithMessage(assertjErrorMessage, actual, jmxNamePrefix, actualJmxNamePrefix);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is lifo.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is not lifo.
   */
  public JedisPoolConfigAssert isLifo() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getLifo()) {
      failWithMessage("\nExpected actual JedisPoolConfig to be lifo but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is not lifo.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is lifo.
   */
  public JedisPoolConfigAssert isNotLifo() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getLifo()) {
      failWithMessage("\nExpected actual JedisPoolConfig not to be lifo but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's maxIdle is equal to the given one.
   * @param maxIdle the given maxIdle to compare the actual JedisPoolConfig's maxIdle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's maxIdle is not equal to the given one.
   */
  public JedisPoolConfigAssert hasMaxIdle(int maxIdle) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected maxIdle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualMaxIdle = actual.getMaxIdle();
    if (actualMaxIdle != maxIdle) {
      failWithMessage(assertjErrorMessage, actual, maxIdle, actualMaxIdle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's maxTotal is equal to the given one.
   * @param maxTotal the given maxTotal to compare the actual JedisPoolConfig's maxTotal to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's maxTotal is not equal to the given one.
   */
  public JedisPoolConfigAssert hasMaxTotal(int maxTotal) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected maxTotal of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualMaxTotal = actual.getMaxTotal();
    if (actualMaxTotal != maxTotal) {
      failWithMessage(assertjErrorMessage, actual, maxTotal, actualMaxTotal);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's maxWaitMillis is equal to the given one.
   * @param maxWaitMillis the given maxWaitMillis to compare the actual JedisPoolConfig's maxWaitMillis to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's maxWaitMillis is not equal to the given one.
   */
  public JedisPoolConfigAssert hasMaxWaitMillis(long maxWaitMillis) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected maxWaitMillis of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualMaxWaitMillis = actual.getMaxWaitMillis();
    if (actualMaxWaitMillis != maxWaitMillis) {
      failWithMessage(assertjErrorMessage, actual, maxWaitMillis, actualMaxWaitMillis);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's minEvictableIdleTimeMillis is equal to the given one.
   * @param minEvictableIdleTimeMillis the given minEvictableIdleTimeMillis to compare the actual JedisPoolConfig's minEvictableIdleTimeMillis to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's minEvictableIdleTimeMillis is not equal to the given one.
   */
  public JedisPoolConfigAssert hasMinEvictableIdleTimeMillis(long minEvictableIdleTimeMillis) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected minEvictableIdleTimeMillis of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualMinEvictableIdleTimeMillis = actual.getMinEvictableIdleTimeMillis();
    if (actualMinEvictableIdleTimeMillis != minEvictableIdleTimeMillis) {
      failWithMessage(assertjErrorMessage, actual, minEvictableIdleTimeMillis, actualMinEvictableIdleTimeMillis);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's minIdle is equal to the given one.
   * @param minIdle the given minIdle to compare the actual JedisPoolConfig's minIdle to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's minIdle is not equal to the given one.
   */
  public JedisPoolConfigAssert hasMinIdle(int minIdle) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected minIdle of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualMinIdle = actual.getMinIdle();
    if (actualMinIdle != minIdle) {
      failWithMessage(assertjErrorMessage, actual, minIdle, actualMinIdle);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's numTestsPerEvictionRun is equal to the given one.
   * @param numTestsPerEvictionRun the given numTestsPerEvictionRun to compare the actual JedisPoolConfig's numTestsPerEvictionRun to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's numTestsPerEvictionRun is not equal to the given one.
   */
  public JedisPoolConfigAssert hasNumTestsPerEvictionRun(int numTestsPerEvictionRun) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected numTestsPerEvictionRun of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualNumTestsPerEvictionRun = actual.getNumTestsPerEvictionRun();
    if (actualNumTestsPerEvictionRun != numTestsPerEvictionRun) {
      failWithMessage(assertjErrorMessage, actual, numTestsPerEvictionRun, actualNumTestsPerEvictionRun);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's softMinEvictableIdleTimeMillis is equal to the given one.
   * @param softMinEvictableIdleTimeMillis the given softMinEvictableIdleTimeMillis to compare the actual JedisPoolConfig's softMinEvictableIdleTimeMillis to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's softMinEvictableIdleTimeMillis is not equal to the given one.
   */
  public JedisPoolConfigAssert hasSoftMinEvictableIdleTimeMillis(long softMinEvictableIdleTimeMillis) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected softMinEvictableIdleTimeMillis of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualSoftMinEvictableIdleTimeMillis = actual.getSoftMinEvictableIdleTimeMillis();
    if (actualSoftMinEvictableIdleTimeMillis != softMinEvictableIdleTimeMillis) {
      failWithMessage(assertjErrorMessage, actual, softMinEvictableIdleTimeMillis, actualSoftMinEvictableIdleTimeMillis);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is testOnBorrow.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is not testOnBorrow.
   */
  public JedisPoolConfigAssert isTestOnBorrow() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getTestOnBorrow()) {
      failWithMessage("\nExpected actual JedisPoolConfig to be testOnBorrow but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is not testOnBorrow.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is testOnBorrow.
   */
  public JedisPoolConfigAssert isNotTestOnBorrow() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getTestOnBorrow()) {
      failWithMessage("\nExpected actual JedisPoolConfig not to be testOnBorrow but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is testOnReturn.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is not testOnReturn.
   */
  public JedisPoolConfigAssert isTestOnReturn() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getTestOnReturn()) {
      failWithMessage("\nExpected actual JedisPoolConfig to be testOnReturn but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is not testOnReturn.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is testOnReturn.
   */
  public JedisPoolConfigAssert isNotTestOnReturn() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getTestOnReturn()) {
      failWithMessage("\nExpected actual JedisPoolConfig not to be testOnReturn but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is testWhileIdle.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is not testWhileIdle.
   */
  public JedisPoolConfigAssert isTestWhileIdle() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (!actual.getTestWhileIdle()) {
      failWithMessage("\nExpected actual JedisPoolConfig to be testWhileIdle but was not.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig is not testWhileIdle.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig is testWhileIdle.
   */
  public JedisPoolConfigAssert isNotTestWhileIdle() {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // check
    if (actual.getTestWhileIdle()) {
      failWithMessage("\nExpected actual JedisPoolConfig not to be testWhileIdle but was.");
    }
    
    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual JedisPoolConfig's timeBetweenEvictionRunsMillis is equal to the given one.
   * @param timeBetweenEvictionRunsMillis the given timeBetweenEvictionRunsMillis to compare the actual JedisPoolConfig's timeBetweenEvictionRunsMillis to.
   * @return this assertion object.
   * @throws AssertionError - if the actual JedisPoolConfig's timeBetweenEvictionRunsMillis is not equal to the given one.
   */
  public JedisPoolConfigAssert hasTimeBetweenEvictionRunsMillis(long timeBetweenEvictionRunsMillis) {
    // check that actual JedisPoolConfig we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected timeBetweenEvictionRunsMillis of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    long actualTimeBetweenEvictionRunsMillis = actual.getTimeBetweenEvictionRunsMillis();
    if (actualTimeBetweenEvictionRunsMillis != timeBetweenEvictionRunsMillis) {
      failWithMessage(assertjErrorMessage, actual, timeBetweenEvictionRunsMillis, actualTimeBetweenEvictionRunsMillis);
    }

    // return the current assertion for method chaining
    return this;
  }

}
