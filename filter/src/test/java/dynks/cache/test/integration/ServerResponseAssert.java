package dynks.cache.test.integration;

import org.assertj.core.api.AbstractAssert;
import org.assertj.core.util.Objects;

/**
 * {@link ServerResponse} specific assertions - Generated by CustomAssertionGenerator.
 */
public class ServerResponseAssert extends AbstractAssert<ServerResponseAssert, ServerResponse> {

  /**
   * Creates a new <code>{@link ServerResponseAssert}</code> to make assertions on actual ServerResponse.
   * @param actual the ServerResponse we want to make assertions on.
   */
  public ServerResponseAssert(ServerResponse actual) {
    super(actual, ServerResponseAssert.class);
  }

  /**
   * An entry point for ServerResponseAssert to follow AssertJ standard <code>assertThat()</code> statements.<br>
   * With a static import, one can write directly: <code>assertThat(myServerResponse)</code> and get specific assertion with code completion.
   * @param actual the ServerResponse we want to make assertions on.
   * @return a new <code>{@link ServerResponseAssert}</code>
   */
  public static ServerResponseAssert assertThat(ServerResponse actual) {
    return new ServerResponseAssert(actual);
  }

  /**
   * Verifies that the actual ServerResponse's contentType is equal to the given one.
   * @param contentType the given contentType to compare the actual ServerResponse's contentType to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServerResponse's contentType is not equal to the given one.
   */
  public ServerResponseAssert hasContentType(String contentType) {
    // check that actual ServerResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected contentType of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualContentType = actual.getContentType();
    if (!Objects.areEqual(actualContentType, contentType)) {
      failWithMessage(assertjErrorMessage, actual, contentType, actualContentType);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Check whether response was generated for corresponding request uri.
   * @param uri
   * @return
   */
  public ServerResponseAssert isFor(String uri){
    isNotNull();
      String assertJErrorMessage = "\nExpected payload starting with: \n <%s>\nbut was: \n <%s>";
      String actualPayload  = actual.getPayload();
      if(actualPayload == null){
          failWithMessage("Actual payload is null");
      }

      //  we are adding servlet context path
      if(!actualPayload.startsWith("/integration-tests/" + uri)){
          failWithMessage(assertJErrorMessage, uri, actualPayload);
      }

      return this;
  }

  public ServerResponseAssert hasEtagSet() {
    // check that actual ServerResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected etag of:\n  <%s>\nto be set\nbut was not";

    // null safe check
    String actualEtag = actual.getEtag();
    if (actualEtag == null) {
      failWithMessage(assertjErrorMessage, actual);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ServerResponse's etag is equal to the given one.
   * @param etag the given etag to compare the actual ServerResponse's etag to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServerResponse's etag is not equal to the given one.
   */
  public ServerResponseAssert hasEtag(String etag) {
    // check that actual ServerResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected etag of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualEtag = actual.getEtag();
    if (!Objects.areEqual(actualEtag, etag)) {
      failWithMessage(assertjErrorMessage, actual, etag, actualEtag);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ServerResponse's payload is equal to the given one.
   * @param payload the given payload to compare the actual ServerResponse's payload to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServerResponse's payload is not equal to the given one.
   */
  public ServerResponseAssert hasPayload(String payload) {
    // check that actual ServerResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected payload of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // null safe check
    String actualPayload = actual.getPayload();
    if (!Objects.areEqual(actualPayload, payload)) {
      failWithMessage(assertjErrorMessage, actual, payload, actualPayload);
    }

    // return the current assertion for method chaining
    return this;
  }

  public ServerResponseAssert hasEmptyPayload(){
    // check that actual ServerResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected payload of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualPayload = actual.getPayload();
    if (actualPayload!=null) {
      failWithMessage(assertjErrorMessage, actual, "null", actualPayload);
    }

    // return the current assertion for method chaining
    return this;
  }

  /**
   * Verifies that the actual ServerResponse's responseCode is equal to the given one.
   * @param responseCode the given responseCode to compare the actual ServerResponse's responseCode to.
   * @return this assertion object.
   * @throws AssertionError - if the actual ServerResponse's responseCode is not equal to the given one.
   */
  public ServerResponseAssert hasResponseCode(int responseCode) {
    // check that actual ServerResponse we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpected responseCode of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";
    
    // check
    int actualResponseCode = actual.getResponseCode();
    if (actualResponseCode != responseCode) {
      failWithMessage(assertjErrorMessage, actual, responseCode, actualResponseCode);
    }

    // return the current assertion for method chaining
    return this;
  }

}
